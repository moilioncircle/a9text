阿九文本(a9text v3.2)
^^^^^^^^^^^^^^^^^^^^^
- 作者: 史荣久(trydofor.com)
- 授权: 共同创作
- 创建: 2007-07-07
- 修改: 2007-12-01

======================================================================

0. 目录
^^^^^^^
[[<=$INDEX]]

1. 功能介绍
^^^^^^^^^^^
a9text是一组文本格式的约定.
用来提高文本文档的可读性和转换性.
(参考 AsciiDoc www.methods.co.nz/asciidoc/)

2. 基本约定
^^^^^^^^^^^
为表达方便,这里为ABNF范式(RFC2234)扩展了个正则表达式(regexp)模式,
完全类似字符串(strings)模式,即,允许在双"/"间直接使用正则表达式.

例如:
rule1 = /^a*$/
rule2 = /^/ *"a" /$/

通用规则:
head_blank = /^[\u0009\u0020\u3000]*/  ;行首空白(/^/ *char_blank)
digit   = /[0-9]+/
hexdig  = /[0-9a-fA-F]+/

2.1. 字符(char)
^^^^^^^^^^^^^^^
char = /./  ; any char

"字符",是指任意unicode字符集,除以下特殊用途外,所有字符无差别对待.

2.1.1. 字符:空白(char_blank)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
char_blank = %x09 / %x20 / %x3000

"字符:空白",是指"水平制表符(u0009)","半角空格(u0020)","全角空格(u3000)".
a9text的空白处理是基于"半角空格(u0020)"的.
其中,"全角空格"等效于2个"半角空格","水平制表符"等效于4个"半角空格".
行首空白的等效"半角空格"数量称为以一个"缩进量(indent)"

2.1.2. 字符:换行(char_line)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
char_line = %x0A / %x0D / %x0D.0A

"字符:换行",是指 "\r","\r\n","\n",也称"换行符".

"物理行(physical_line)",是指文本显示上的行.
"逻辑行(logical_line)",是指语法或语义上的行(也称为"段落").

"软换行(soft_line)",是指在"物理行(physical_line)"行尾,使用" "或奇数个连续"\",
把多个"物理行(physical_line)"合并成为一个"物理行(physical_line)",
并忽略相邻行间的"空白".

行尾偶数(n)个连续'\',被认为是(n/2)个'\'的转义.

a9text的处理是基于"逻辑行(logical_line)"的.

2.1.3. 字符:转义(char_escape)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
char_escape = "\"

a9text在大多数情况下不需要也不考虑转义,
但为了描述a9text约定本身,有时需要使用转义.

"转义"是指在"转义位置"使用奇数(2n+1)个连续"\",
而前面的偶数(2n)个连续'\',被认为是(n)个'\'的转义.

2.2. 模式(mode)
^^^^^^^^^^^^^^^
mode = 1*(mode_text / mode_trig / mode_join / mode_link / mode_*htm)

"模式",是a9text语法上的分组,由至少一个字符组成,是组成a9text的原子单位.

"模式"的"转义位置"为模式开始标识'['和模式结束标识']]'前,
单独出现的']]'不会引起歧义,不可以转义.

2.2.1. 模式:修饰(mode_trig)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
mode_trig = "[" 1*mode_token "[" 1*char "]]"
mode_token = "!" / "/" / "_" / "-" / "'" / "," /
             ("%" 1*digit) / ("#" 6hexdig) / ("&" 6hexdig)

"模式:修饰",实现文本的修饰功能.
"模式:修饰"内的"物理行(physical_line)",视为"软换行(soft_line)".

"模式:修饰"内可以包含其他"模式",也可包括自身.

举例:
加粗 [![文字]]
倾斜 [/[文字]]
下划 [_[文字]]
删除 [-[文字]]
上标 ['[文字]]
下标 [,[文字]]
前色 [#FFFFF[文字]]
背色 [&FFFFF[文字]]
大小 [%50[文字]]
加粗倾斜红色50%的字 [!/#FF0000%50[文字]]

2.2.2. 模式:链入(mode_join)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
mode_join = "[[<=" 0*1"$" 1*char "]]"

"模式:链入",可以在指定位置上导入变量,文本,图片,声音,视频或其他内容.
如果链入的是文件,相对路径要以'.'开头:'./','../','../../'等,非'.'开头表示绝对路径.
"模式:链入"内的"物理行(physical_line)",视为"软换行(soft_line)".

"模式:链入"内不可以包含其他"模式".

举例:
[[<=include.txt]] 载入的文本.
[[<=$变量]] 变量可以是"字典(dict)"的"键(key)"或内置变量.
内置变量包括:
    "$INDEX", 由"章节(sect)"构成的目录.

2.2.3. 模式:链出(mode_link)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
mode_link = "[[" 0*char "=>" 1*char "]]"

"模式:链出",可以页面跳转和显示多媒体内容并跳转.
"模式:链出"内的"物理行(physical_line)",视为"软换行(soft_line)".

"模式:链出"内不可以包含其他"模式".

举例:
[[显示名=>]]     作为锚点
[[=>#锚点]]      链到锚点
[[=>链接地址]]   以链接地址显示
[[=>sample.png]]
[[=>sample.swf]]
[[=>www.trydofor.com]]
[[=>admin@trydofor.com]]
[[显示名=>链接地址]]

2.2.4. 模式:HTML(mode_*htm)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
mode_$htm = "[*htm[" 1*char "]]"
内部字符被认为是html代码执行.
其内的"物理行(physical_line)",视为"软换行(soft_line)".

"模式:HTML"内不可以包含其他"模式".

2.2.5. 模式:文本(mode_text)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
一组不满足以上"模式" 特征的连续字符,都视为"文本(mode_text)".
"模式:文本"内不可以包含其他"模式".

2.3. 区域(area)
^^^^^^^^^^^^^^^
area = area_head *1area_args area_body area_foot
area_head = head_blank 9*"=" area_type *" " ":" *" " area_info
            9*"=" char_line
area_type = /\*?\w+/
area_info = /[^\r\n]+/
area_args = head_blank /args:/ /[^\r\n]+/ char_line
area_body = 1*char
area_foot = head_blank 9*"=" char_line

"区域",是一块特殊的文字,需要特别处理.
例如:
"========= *html:info =========" '*'开头表示功能性模块
"========= text:info  ========="

其中"area_type"如果以"*"开头,这表示是功能区域(不显示),否则为文本区域.
"信息(area_info)",是对"区域"的信息摘要.
"参数(area_args)",以';'分割,'='赋值.
转义"area_foot",在/=+/前使用 '\'.

"区域"的"转义位置" 是连续的'='前.

"区域"不可以自包含.
"区域"内的文字如何解析需要进一步定义和扩展.

2.4. 段落(para/paragraph)
^^^^^^^^^^^^^^^^^^^^^^^^^
para = head_blank *(mode / char_line)

"段落",是指一个"逻辑行(logical_line)",是最小的处理单元.
由行首"空白(head_blank)",各种"模式(mode)"构成和"换行(char_line)"组成.
"段落"内不可以内嵌其他"段落".

"空行"和"横线"的"转义位置" 是行首紧接着标识(' '/'-'/'='/'#')的位置.

2.4.1. 段落:空行(para_blank)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
para_blank = head_blank char_line

"段落:空行",是一种特殊的"段落(para)",自成一段,结束上段,开启下段,
但不属于上下任何一段.

2.4.2. 段落:横线(para_line)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
para_line = head_blank 1*(9*"-" / 9*"=" / 9*"#" ) char_line

"段落:横线",完全类似于"空行(para_blank)",不同的是,他会画一条水平线.
"-","=","#" 代表着线的宽度,分别为,1,2,4个宽度,并且字符的数量决定横线的长度.

2.5. 字典(dict)
^^^^^^^^^^^^^^^
dict = head_blank dict_key *char_blank dict_token dict_val
dict_key   = /\[?[ 　\t^`^@#\$%\^&\*\(\)\{\}\[\]\:\;'",<.>\?/</.>=+\r\n]+\]?/ ;非标点和空白
dict_token = /:{2,}/
dict_val   = *1char_line 1*para

"字典",由行首"空白(char_blank)","字典符(dict_token)" 和至少一个"段落(para)"组成.
用来定义用户变量和说明,可以在"模式:链入(mode_join)"中引用.
"字典"内至少有一个"段落(para)",不可以包含"字典".

"字典键(dict_key)",是不含首尾"空白"的连续字符串.
"字典键"必须和"字典符(dict_token)"在同一"物理行(physical_line)".
"字典值(dict_val)" 可以不和"字典符(dict_token)" 在同一行.

"字典"的"转义位置" 是"字典符(dict_token)"前.

2.5.1. 显示特性
^^^^^^^^^^^^^^^
"字典符(dict_token)" 中 ":"的个数(x),再显示的时候,会显示 x-2 个":".
"字典符(dict_token)" 后直接换行,显示的时候也会换行后显示"字典值(dict_val)".

2.5.2. 提示(hint)
^^^^^^^^^^^^^^^^^
"提示(hint)" 是"字典"的一个种特殊形式,不可以被引用,只作为提示标记.
如:[NOTE],[WARN] 等

2.6. 列表(list)
^^^^^^^^^^^^^^^
list = head_blank (list_item / list_step) *char_blank ")" 1*para  *list
list_item = "*"
list_step = /[0-9a-zA-Z]/ *("-" /[0-9a-zA-Z]/)

"列表",由行首"空白",列表类型,")"和至少一个"段落(para)"组成,可以包含其他"列表".

一组连续的列表,"缩进量(indent)"相同的列表视为同一组.
"缩进量(indent)"的多少,体现列表间的包含关系(少的包含多的).
"缩进量(indent)"小于列表的"段落"或"列表",即为被包含.

"列表" 细分为 "列表:条目(list_item)" 和 "列表:步骤(list_step)"

"列表:条目(list_item)" 是无序列表.
"列表:步骤(list_step)" 是有序列表,可以使用"a-1","a-2"这样的组合.

"列表"的"转义位置" 是 head_blank 后.

2.7. 章节(sect/section)
^^^^^^^^^^^^^^^^^^^^^^^
sect = head_blank sect_level sect_title char_line sect_token char_line sect_text
sect_level = 1*(digit ".")
sect_title = /[^\r\n]+/
sect_token = /\^{3,}/
sect_text  = 1*(area / list / dict / para)

"章节",内可包含之前所以"约定".但,"章节"内不可包含"章节".
"章节"的"转义位置" 是 行首.

2.8. 根(root)
^^^^^^^^^^^^^
root = *1(title info) 1*(area / list / dict / para / sect)
title = head_blank /[^\r\n]+/ char_line /\^{3,}/
info = *(head_blank '-' char_blank /[^\r\n]+/ char_line)

"根",是a9text的最高约定,领起其他约定,是一个a9text的开始,必须位于最开始.
一个a9text中"根(root)"只能有一个,可以包含任何其他"约定".
info 可以至少包含1个 para.

3. 约定图谱
^^^^^^^^^^^
3.1. 约定包含图
^^^^^^^^^^^^^^^
root
 |
 +-- *1info
 |   |
 |   +-- 1*para
 |
 +--------------------------------------------- *sect
 |                                               |
 +---------------------------------- *dict       +-- *area
 |                                    |          |
 +------------------------ *list      +-- 1*mode +-- *list
 |                          |                    |
 +------------ *para        +-- 1*para           +-- *dict
 |              |           |                    |
 +-- *area      +-- *mode   +-- *list            +-- *para
 |    |              |
 |    +-- *char      +-- mode_trig
 |                   |
 |                   +-- mode_join
 |                   |
 |                   +-- mode_link
 |                   |
 |                   +-- mode_text
 |                   |
 |                   +-- mode_*htm

mode是inline元素,此外的其他元素都是块元素.
除mode_trig可以包含其他mode外,其他mode不可以包含.

3.2. 约定结构图
^^^^^^^^^^^^^^^
a9text = root
root = *1inof 1*(sect / dict / list / para / area)
sect = 1*(dict / list / para / area)
dict = 1*mode
list = 1*mode *list

一个a9text有且只有一个"根(root)"构成.
"根(root)"中只能包含一个"信息(info)".
"根(root)"中至少包含(无序)(sect/dict/list/para/area)中的一个.
"章节(sect)"中至少包含(无序)(dict/list/para/area)中的一个.
"字典(dict)"中至少包含一个mode.
"列表(list)"中至少包含一个mode,可以包含其他list.

"段落(para)"中至少包含一个"模式(mode)".
"模式(mode)"中至少包含一个字符.
"区域(area)"中至少包含一个字符.

4. 文本处理
^^^^^^^^^^^
4.1. 换行
^^^^^^^^^
"段落(para)"在语法上讲,就是一个"逻辑行(logical_line)".而a9text是基于
"逻辑行(logical_line)"的,因此"段落(para)"是a9text的最小处理单元.

除了"区域(area)"是自定义解析规则外,段落划分遵循这样的原则,即:
1) 一个"物理行"就是视为一个"逻辑行",也就是"段落(para)".
2) "软换行"可以把多个"物理行"连接成一个"物理行".
3) 除"模式:文本"外的"模式"内部的"物理行",自动视为"软换行".

4.2. 空白
^^^^^^^^^
为了统一和方便,a9text中的"空白"都会转换成"半角空格"处理,
"全角空格"等效于2个"半角空格","水平制表符"等效于4个"半角空格".

"软换行",会自动去掉相邻"物理行"间的"空白".

4.3. 缩进
^^^^^^^^^
"物理行"行首"空白"的等效"半角空格"数,称作"缩进量",用来表示层次或缩进.

"区域"的缩进,表示位置.
"段落"的缩进,表示段落的位置.
"列表"的缩进,即表示位置,也表示层次.
"字典"的缩进,表示位置.
"章节"和"跟",没有缩进.

5. 区域扩展
^^^^^^^^^^^
"区域(area)" 的内容是需要进一步定义的.a9text预定义了如下简单"区域(area)".

5.1. 区域:文本(area_text)
^^^^^^^^^^^^^^^^^^^^^^^^^
"区域:文本"内的文本,不做任何解析,保留原样显示.
格式如下:
"========= text:info ========="

info,是对文本的描述信息,如文件名,标题等待.

5.2. 区域:*HTM(area_*htm)
^^^^^^^^^^^^^^^^^^^^^^^^
"区域:*HTM",内的文本,做为html代码使用.
格式如下:
"========= *htm: info ========="

info,是说明信息.

5.3. 区域:表格(area_table)
^^^^^^^^^^^^^^^^^^^^^^^^^^
"区域:表格",实现最粗糙的表格.
格式如下:

"========== table:info =========="
! r1-c1 | r1-c2! r1-c3|
+--------------------------------
|r2-c1  |r2-c2 |r2-c3 |
+--------------------------------
||  r3-c1&2    |+ r3&4-c3 |
+--------------------------------
|r4-c1 | r4-c2 |+ r4&4-c3 |
"================================"

'!'表示加粗,'|'表一般显示,r1-c1,r1-c3加粗显示
空格表对齐:r1-c1中对齐,r1-c2右对齐,r1-c3左对齐,默认左对齐.
连续'|'为列合并,左起
'|+'为行合并,上起

info,是表格名.

5.4. 区域:边框(area_box)
^^^^^^^^^^^^^^^^^^^^^^^^
"区域:边框",设置带边框的和滚动条的区域.
格式如下:
"========= box: info ========="

info,是说明信息.

5.5. 区域:BASE64(area_b64)
^^^^^^^^^^^^^^^^^^^^^^^^^^
"区域:BASE64"内的文本是BASE64内容.
格式如下:
"========= b64: info ========="

info,是说明信息,如文件名等.

5.6. 区域:DES(area_des)
^^^^^^^^^^^^^^^^^^^^^^^
"区域:DES"内的文本是BASE64内容.
格式如下:
"========= des: info ========="

info,是des暗语等.

5.7. 区域:终端(area_tty)
^^^^^^^^^^^^^^^^^^^^^^^^
"区域:终端",存放程序代码或指令.
格式如下:
"========= tty: info ========="

info,是说明信息.
终端包括,输入,输出,错误,增加行,删除行和注释等语法.
*) 标准输出: '>'
*) 标准错误: '@'
*) 增加行: '+'
*) 删除行: '-'
*) 单行注释:'//','#'
*) 多行注释:'/*','*/'
*) 标准输入: 非以上标记领起的行视为输入.
以上符号,领起的行表示特定功能,使用'\'转义.

5.8. 区域:JAVA(area_java)
^^^^^^^^^^^^^^^^^^^^^^^^^
"区域:JAVA",存放程序代码或指令.
格式如下:
"========= java: info ========="

info,是说明信息.

5.9. 区域:SQL(area_sql)
^^^^^^^^^^^^^^^^^^^^^^^
"区域:SQL",存放程序代码或指令.
格式如下:
"========= sql: info ========="

info,是说明信息.

5.10. 区域:BASH(area_bash)
^^^^^^^^^^^^^^^^^^^^^^^^^^
"区域:BASH",存放程序代码或指令.
格式如下:
"========= bash: info ========="

info,是说明信息.
